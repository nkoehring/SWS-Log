Starting today I am my own OpenID provider. Why that is a cool thing and how I
managed to do it will be explained in this article.

h2. OpenID?

OpenID is a standard that allows authentication via third-party services. So
the authentication is not done on the side of the used service, just like
OAuth.

The big difference: Rather than services beeing tied to one OAuth authenticator
(like "Login with your Google/Amazon/Twitter account"), OAuth is independet.
Instead having a couple of login buttons you just need one. An OpenID is an URL
and can resolved the same way. That is because OpenID doesn't offer any profile
of some specific service but an independent one. If a service especially asks
for your Facebook account, it probably wants way more than just offer you a
simple way of authentication.


h2. You probably already have one.

Just like XMPP (a.k.a. Jabber), which sneakes in everywhere, you probably also
have an OAuth provider already. Google, Yahoo, LiveJournal, Blogger, Flickr,
MySpace, WordPress, AOL, .. they all offer you OpenID authentication. See "Get
an OpenID":http://openid.net/get-an-openid/ for details on that topic.


h2. Cool, so why rolling out your own provider?

Simple! I don't want Google or any other company to be my authenticator. They
already know way to much and I want to be in control of my data! Also it is
nice to have anything unified with one single URL. With everything I mean
Website, Email, Jabber and now finally also Authentication.

There are two ways. The most simple way – delegation – is again dependent on an
external provider.

<pre>
<code>
  <link rel="openid.server" href="http://openidprovider.tld/server" />
  <link rel="openid.delegate" href="http://homepage.tld" />
  <link rel="openid2.provider" href="http://openidprovider.tld/server" />
  <link rel="openid2.local_id" href="http://homepage.tld" />
  <meta http-equiv="X-XRDS-Location"
        content="http://openidprovider.tld/xrds?username=homepage.tld" />
</code>
</pre>

Put this into your homepages markup at http://homepage.tld and it will delegate
your domain as an id to your provider at http://openidprover.tld/server.
Simple!

But I still want to be my own provider, because I'm a total privacy zealot!


h2. Become your own OpenID provider.

Thanks to some nice people, it is super easy to become your own provider. Of
course you need some webspace and knowledge about its handling.

Rather than RTFM or using some fancy library to program the whole thing myself
I just decided to pick some ready made OpenID provider. The first results
contained "SimpleID":http://simpleid.sourceforge.net/. What made it my choice
was, that there is a Ubuntu package for it, so installing it on my webserver
was a piece of cake.

As I am used to, the SimpleID package comes nicely preconfigured and just works
with my Apache2 setup. Without configuration, the service will be located at
http://homepage.tld/simpleid. If you want to change that, just look into the
well documented configuration file in /etc/simpleid/. A symlink to the Apache
configuration file is located here, too.

All you need now is an identity file. A well documented example is included:

<pre>
<code>
%> sudo -s
#> cp /usr/share/simpleid/sample/example.identity.dist /var/lib/simpleid/identities/homepage.tld.identity
#> $EDITOR /var/lib/simpleid/identities/homepage.tld.identity

</code>
</pre>

It needs two lines. Your identity (your domain name for example) and your MD5
hashed password:

<code>
identity="http://homepage.tld/"
pass="47635cbe1a0ee7f472ff202955bf9b34"
</code>

If you – just like in my examples – don't want to put that /simpleid
everywhere, you also need to delegate just like I described above. Here is,
what I have on my domain:

<pre>
<code>
<meta http-equiv="X-XRDS-Location" content="https://koehr.in/openid/xrds/koehr" />
<link rel="openid.server" href="https://koehr.in/openid/" />
<link rel="openid2.provider" href="https://koehr.in/openid/" />
</code>
</pre>

As you can see, you don't need to set your ID again.

Thats it! You can login at http://homepage.tld/simpleid to check your settings
and manage your connections.
